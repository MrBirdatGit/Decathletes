jQuery.fn.extend({
	selectedContents: function() {
		var s, e, range, stored_range;
		if (this[0].selectionStart == undefined) {
			var selection = document.selection;
			if (this[0].tagName.toLowerCase() != 'textarea') {
				var val = this.val();
				range = selection.createRange().duplicate();
				range.moveEnd("character", val.length);
				s = (range.text == "" ? val.length : val.lastIndexOf(range.text));
				range = selection.createRange().duplicate();
				range.moveStart("character", -val.length);
				e = range.text.length;
			} else {
				range = selection.createRange(),
				stored_range = range.duplicate();
				stored_range.moveToElementText(this[0]);
				stored_range.setEndPoint('EndToEnd', range);
				s = stored_range.text.length - range.text.length;
				e = s + range.text.length;
			}
		} else {
			s = this[0].selectionStart,
			e = this[0].selectionEnd;
		}
		var te = this[0].value.substring(s, e);
		var head = this[0].value.substring(s - 1, s) == '\n' || s == 0 ? true : false;
		return {start: s, end: e, head: head, text: te};
	},
	insertAtCaret: function(textValue, reg, leftWrap, rightWrap, newline) {
		var $t = $(this)[0];
		var selectedContents = this.selectedContents();
		if (selectedContents['text'] != '' && reg) {
			if (selectedContents['text'].match(reg)) {
				textValue = selectedContents['text'].match(reg)[1];
			} else {
				textValue = leftWrap + selectedContents['text'] + rightWrap;
			}
		}
		if (!selectedContents.head && newline)
			textValue = '\n' + textValue;
		if (document.selection) {
			this.focus();
			sel = document.selection.createRange();
			sel.text = textValue;
			this.focus();
		} else if ($t.selectionStart || $t.selectionStart == '0') {
			var startPos = $t.selectionStart;
			var endPos = $t.selectionEnd;
			var scrollTop = $t.scrollTop;
			$t.value = $t.value.substring(0, startPos) + textValue + $t.value.substring(endPos, $t.value.length);
			this.focus();
			$t.selectionStart = startPos + textValue.length;
			$t.selectionEnd = startPos + textValue.length;
			$t.scrollTop = scrollTop;
		} else {
			this.value += textValue;
			this.focus();
		}
	}
});

function display() {
	var tex = $('textarea#laTex').val(), preview = $('#laTex-preview');
	if (tex == '\\' || tex == '') {
		preview.empty();
		return;
	}
	preview.html('\\[' + tex + '\\]');
	renderMathInElement(preview[0], {
		delimiters: [{left: "$$", right: "$$", display: true}, {left: "$", right: "$", display: false}, {left: "\\[", right: "\\]", display: false}]
	});
}

function insertText(txt, pos) {
	// pos = optional parameter defining where in inserted text to put the caret
	// if undefined put at end of inserted text
	// if pos=1000 then using style options and move to just before final }
	// startPos = final position of caret in complete text
	if (pos == 1000)
		pos = txt.length - 1;
	if (pos == undefined) {
		txt += ' ';
		pos = txt.length;
	} // always insert a space after
		
	// my textarea is called latex_formula
	myField = document.getElementById('laTex');
	if (document.selection) {
		// IE
		myField.focus();
		var sel = document.selection.createRange();
		// find current caret position
		
		var i = myField.value.length + 1; 
		theCaret = sel.duplicate(); 
		while (theCaret.parentElement() == myField && theCaret.move("character",1) == 1)
			i--;
		
		// take account of line feeds
		var startPos = i - myField.value.split('\n').length + 1 ; 
		
		if ((txt.substring(1, 5) == "left" || txt.substring(pos - 1, pos) == '{') && sel.text.length) { 
			// allow highlighted text to be bracketed
			if (txt.substring(1, 5) == "left")
				ins_point=7;
			else
				ins_point=pos;
			pos = txt.length + sel.text.length + 1;
			sel.text = txt.substring(0, ins_point) + sel.text + txt.substr(ins_point);	     
		} else {
			sel.text = txt;
		}
		// put caret in correct position to start editing
		var range = myField.createTextRange();
		range.collapse(true);
		range.moveEnd('character', startPos + pos);
		range.moveStart('character', startPos + pos);
		range.select();
	} else { // MOZILLA
		if (myField.selectionStart || myField.selectionStart == '0')	{
			var startPos = myField.selectionStart;
			var endPos = myField.selectionEnd;
			var cursorPos = startPos + txt.length;
			if ((txt.substring(1, 5) == "left" || txt.substr(pos-1, 1) == '{') && endPos > startPos) { 
				// allow highlighted text to be bracketed
				if(txt.substring(1, 5) == "left")
					ins_point=7;
				else
					ins_point=pos;
				pos = txt.length + endPos - startPos + 1;
				txt = txt.substring(0,ins_point) + myField.value.substring(startPos, endPos) + txt.substr(ins_point);			
			}
			myField.value = myField.value.substring(0, startPos) + txt + myField.value.substring(endPos, myField.value.length);
			myField.selectionStart = cursorPos;
			myField.selectionEnd = cursorPos;
					
			// put caret in correct position to start editing
			myField.focus();
			myField.setSelectionRange(startPos + pos, startPos + pos);	
		} else
			myField.value += txt;
	}
	myField.focus();
	display();
}

function makeArrayMatrix(type, start, end) {
	var matr = start + '\\begin{' + type + 'matrix}';
	var row = "\n";
	var mend = "\n\\end{" + type + "matrix}" + end;
	var i = 0;
	var dim = prompt('Enter the array dimensions separated by a comma (e.g. "2,3" for 2 rows and 3 columns):', '')

	if (dim != '' && dim != null) {
		dim = dim.split(',');
		m = parseInt(dim[0]);
		n = parseInt(dim[1]);
		
		if (!isNaN(m) && !isNaN(n)) {
			for (i = 2; i <= n; i++)
				row = row + ' & ';
			
			for (i = 1; i <= m - 1; i++)
				matr = matr + row + '\\\\ ';
			
			matr = matr + row + mend;
			insertText(matr, type.length + start.length + 15);
		}
	}
}

function makeEquationsMatrix(type, isNumbered, isConditional) {
	if (isNumbered == undefined) isNumbered = false;
	if (isConditional == undefined) isNumbered = false;

	var eqns = "\\begin{" + type + ((isNumbered) ? "" : "*") + "}";
	var eqi = "\n &" + ((isNumbered) ? " " : "= ") + ((isConditional) ? "\\text{ if } x=  " : "");
	var eqEnd = "\n\\end{" + type + ((isNumbered)?"" : "*") + "}";
	var i = 0;

	var dim = prompt('Enter the number of lines:', '');

	if (dim != '' && dim != null)	{
		n = parseInt(dim);
		if (!isNaN(n)) {
			for (i = 1; i <= n-1; i++)
				eqns = eqns + (eqi + "\\\\ ");
			eqns = (eqns + eqi) + eqEnd;
			insertText(eqns, type.length + ((isNumbered) ? 0 : 1) + 9);
		}
	}
}

$(document).ready(function() {
	$('div.markdown-editor').each(function(index, mdeditor) {
		var $toolbar = '<div class="md-toolbar">\
							<span title="Strong" class="tool fa fa-bold"></span>\
							<span title="Emphasis" class="tool fa fa-italic"></span>\
							<span class="divider"></span>\
							<span title="Hyperlink" class="tool fa fa-link"></span>\
							<span title="Blockquote" class="tool fa fa-quote-left"></span>\
							<span title="Code Sample" class="tool fa fa-code"></span>\
							<span title="Image" class="tool fa fa-picture-o"></span>\
							<span class="divider"></span>\
							<span title="Numbered List <ol>" class="tool fa fa-list-ol"></span>\
							<span title="Bulleted List <ul>" class="tool fa fa-list-ul"></span>\
							<div class="md-fontsize">\
								<span title="Heading" class="md-font-icon fa fa-text-height"></span>\
								<div class="md-font-box">\
									<span title="<h1>" class="tool">H1</span>\
									<span title="<h2>" class="tool">H2</span>\
									<span title="<h3>" class="tool">H3</span>\
									<span title="<h4>" class="tool">H4</span>\
									<span title="<h5>" class="tool">H5</span>\
								</div>\
							</div>\
							<span title="Horizontal Rule <hr>" class="tool fa fa-minus"></span>\
							<span class="divider"></span>\
							<span class="divider"></span>\
							<i title="laTex" class="latex">Fx</i>\
							<div class="pull-right"><button type="button" class="btn btn-preview preview">Ô¤ÀÀ</button></div>\
						</div>';
		var $laTexPanel = '<div class="modal fade latex" role="dialog">\
								<div class="modal-dialog">\
									<div class="modal-content">\
										<div class="modal-header">\
											<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>\
											<h5>¹«Ê½±à¼­Æ÷</h5>\
										</div>\
										<div class="modal-body">\
											<div id="laTex-toolbar"></div>\
											<textarea class="form-control" id="laTex"></textarea>\
											<div id="laTex-preview"></div>\
										</div>\
										<div class="modal-footer">\
											<button type="button" class="btn btn-primary" id="laTex-insert">²åÈë</button>\
											<button type="button" class="btn btn-primary" data-dismiss="modal">¹Ø±Õ</button\
										</div>\
									</div>\
								</div>\
							</div>';
		var $form = $(this).find('form');
		var $textarea = $(this).find('textarea:eq(0)');
		$textarea.parent().css('position', 'relative');
		$toolbar = $($toolbar).insertBefore($textarea);
		$toolbar.outerWidth($textarea.outerWidth());
		$laTexPanel = $($laTexPanel).appendTo('body');
		$.get('/assets/laTexSymbol.html', function(html) {
			$laTexPanel.find('#laTex-toolbar').html(html);
		});
		$('textarea#laTex').on('change keyup', display);
		$('<div style="position: relative;"><div class="md-preview"></div></div>').insertAfter($form).hide();
		var $preview = $(this).find('.md-preview'),
			$previewWrapper = $preview.parent();
		$fontBox = $toolbar.find('.md-fontsize > .md-font-box').hide();
		$toolbar.find('.md-fontsize').hover(function() {
			$fontBox.css({
				display: 'inline-block'
			});
		}, function() {
			$fontBox.css({
				display: 'none'
			});
		});
		$toolbar.find('.tool').click(function(event) {
			if ($toolbar.find('button.btn-preview').is('.preview')) {
				if ($(this).text().match(/H(\d)/)) {
					$h = parseInt($(this).text().match(/H(\d)/)[1]);
					var wrap = '';
					for (i = 0; i < $h; i++)
						wrap += '#';
					$textarea.insertAtCaret(wrap + 'Heading ' + $h + '\n', wrap + '(.*)' + wrap, wrap, wrap + '\n', true);
				} else {
					switch ($(this).attr('class').match(/fa fa-(.+)/)[1]) {
						case 'bold':
							$textarea.insertAtCaret('**strong text**', '\\*\\*(.*)\\*\\*', '**', '**', false);
							break;
						case 'italic':
							$textarea.insertAtCaret('*emphasized text*', '\\*(.*)\\*', '*', '*', false);
							break;
						case 'link':
							$textarea.insertAtCaret('[link description](link "optional tilte")', '^$', '[', '](link "optional tilte")', false);
							break;
						case 'quote-left':
							$textarea.insertAtCaret('> Blockquote', '> (.+)', '> ', '\n', true);
							break;
						case 'code':
							$textarea.insertAtCaret('`code`', '`(.*)`', '`', '`', false);
							break;
						case 'picture-o':
							$textarea.insertAtCaret('![image description](link "optional tilte")', '^$', '![', '](link "optional tilte")', false);
							break;
						case 'list-ol':
							$textarea.insertAtCaret('1. List item', '\d+\s*\.\s*(.+)', '1. ', '', true);
							break;
						case 'list-ul':
							$textarea.insertAtCaret('- List item', '-\s*(.+)', '- ', '', true);
							break;
						case 'text-height':
							break;
						case 'minus':
							$textarea.insertAtCaret('____________\n', '', '', '', true);
							break;
						default:
							break;
					}
				}
			}
		});
		$toolbar.find('.latex').click(function() {
			$laTexPanel.find('#laTex').val('');
			$laTexPanel.find('#laTex-preview').empty();
			$laTexPanel.modal('show');
		});
		$laTexPanel.find('#laTex-insert').click(function() {
			$textarea.insertAtCaret('$' + $laTexPanel.find('#laTex').val() + '$', '', '', '', false);
			$laTexPanel.modal('hide');
		});
		$toolbar.find('button.btn-preview').click(function(event) {
			if ($(this).is('.preview')) {
				$(this)
				.text('±à¼­')
				.removeClass('preview');
				$form.hide();
				$toolbar.insertBefore($preview);
				$preview.html(marked($textarea.val()));
				$previewWrapper.show();
				renderMathInElement($preview[0], {
					delimiters: [{left: "$$", right: "$$", display: true}, {left: "$", right: "$", display: false}, {left: "\\[", right: "\\]", display: false}]
				});
			} else {
				$(this)
				.text('Ô¤ÀÀ')
				.addClass('preview');
				$previewWrapper.hide();
				$toolbar.insertBefore($textarea);
				$form.show();
			}
		});
	});
});
>Å[E      Y{2Y{2>QYÔz   ,    :http://acm.hdu.edu.cn/assets/js/mdeditor.js necko:classified 1 request-method GET response-head HTTP/1.1 200 OK
Date: Tue, 25 Jul 2017 01:05:50 GMT
Server: Apache
Last-Modified: Sun, 16 Aug 2015 04:26:14 GMT
Etag: "500000000c2ef-3125-51d6615e425e1"
Accept-Ranges: bytes
Content-Length: 12581
Access-Control-Allow-Origin: *
Content-Type: application/javascript
Age: 30736
X-Cache: HIT from wwwcache1.hdu.edu.cn
Via: 1.1 wwwcache1.hdu.edu.cn (squid/3.5.22)
 uncompressed-len 0   1%